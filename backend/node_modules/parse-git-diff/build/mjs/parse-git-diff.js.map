{"version":3,"file":"parse-git-diff.js","sourceRoot":"","sources":["../../src/parse-git-diff.ts"],"names":[],"mappings":"AAAA,OAAO,OAAO,MAAM,cAAc,CAAC;AASnC,OAAO,EACL,cAAc,EACd,oBAAoB,EACpB,QAAQ,EACR,QAAQ,GACT,MAAM,gBAAgB,CAAC;AAExB,MAAM,CAAC,OAAO,UAAU,YAAY,CAClC,IAAY,EACZ,OAAwB;IAExB,MAAM,GAAG,GAAG,IAAI,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IACvC,MAAM,KAAK,GAAG,gBAAgB,CAAC,GAAG,CAAC,CAAC;IAEpC,OAAO;QACL,IAAI,EAAE,SAAS;QACf,KAAK;KACN,CAAC;AACJ,CAAC;AAED,SAAS,gBAAgB,CAAC,GAAY;IACpC,MAAM,YAAY,GAAoB,EAAE,CAAC;IACzC,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,EAAE,CAAC;QACpB,MAAM,OAAO,GAAG,eAAe,CAAC,GAAG,CAAC,CAAC;QACrC,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,MAAM;QACR,CAAC;QACD,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC7B,CAAC;IACD,OAAO,YAAY,CAAC;AACtB,CAAC;AAED,SAAS,eAAe,CAAC,GAAY;IACnC,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC,EAAE,CAAC;QAC7C,OAAO;IACT,CAAC;IACD,MAAM,oBAAoB,GAAG,wBAAwB,CAAC,GAAG,CAAC,CAAC;IAC3D,IAAI,SAAS,GAAG,KAAK,CAAC;IACtB,IAAI,KAAK,GAAG,KAAK,CAAC;IAClB,IAAI,QAAQ,GAAG,KAAK,CAAC;IACrB,IAAI,UAAU,GAAG,EAAE,CAAC;IACpB,IAAI,SAAS,GAAG,EAAE,CAAC;IACnB,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,EAAE,CAAC;QACpB,MAAM,SAAS,GAAG,mBAAmB,CAAC,GAAG,CAAC,CAAC;QAC3C,IAAI,CAAC,SAAS,EAAE,CAAC;YACf,MAAM;QACR,CAAC;QACD,IAAI,SAAS,CAAC,IAAI,KAAK,cAAc,CAAC,OAAO,EAAE,CAAC;YAC9C,SAAS,GAAG,IAAI,CAAC;YACjB,UAAU,GAAG,oBAAoB,EAAE,IAAI,IAAI,EAAE,CAAC;QAChD,CAAC;QACD,IAAI,SAAS,CAAC,IAAI,KAAK,cAAc,CAAC,OAAO,EAAE,CAAC;YAC9C,KAAK,GAAG,IAAI,CAAC;YACb,SAAS,GAAG,oBAAoB,EAAE,EAAE,IAAI,EAAE,CAAC;QAC7C,CAAC;QACD,IAAI,SAAS,CAAC,IAAI,KAAK,cAAc,CAAC,UAAU,EAAE,CAAC;YACjD,QAAQ,GAAG,IAAI,CAAC;YAChB,UAAU,GAAG,SAAS,CAAC,IAAc,CAAC;QACxC,CAAC;QACD,IAAI,SAAS,CAAC,IAAI,KAAK,cAAc,CAAC,QAAQ,EAAE,CAAC;YAC/C,QAAQ,GAAG,IAAI,CAAC;YAChB,SAAS,GAAG,SAAS,CAAC,IAAc,CAAC;QACvC,CAAC;IACH,CAAC;IAED,MAAM,aAAa,GAAG,kBAAkB,CAAC,GAAG,CAAC,CAAC;IAC9C,MAAM,MAAM,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC;IAEhC,IAAI,SAAS,IAAI,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,kBAAkB,EAAE,CAAC;QACxE,OAAO;YACL,IAAI,EAAE,QAAQ,CAAC,OAAO;YACtB,MAAM;YACN,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,UAAU;SAC3B,CAAC;IACJ,CAAC;IACD,IAAI,SAAS,EAAE,CAAC;QACd,OAAO;YACL,IAAI,EAAE,QAAQ,CAAC,OAAO;YACtB,MAAM;YACN,IAAI,EAAE,aAAa,EAAE,OAAO,IAAI,UAAU;SAC3C,CAAC;IACJ,CAAC;SAAM,IAAI,KAAK,IAAI,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,kBAAkB,EAAE,CAAC;QAC3E,OAAO;YACL,IAAI,EAAE,QAAQ,CAAC,KAAK;YACpB,MAAM;YACN,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,SAAS;SAC1B,CAAC;IACJ,CAAC;SAAM,IAAI,KAAK,EAAE,CAAC;QACjB,OAAO;YACL,IAAI,EAAE,QAAQ,CAAC,KAAK;YACpB,MAAM;YACN,IAAI,EAAE,aAAa,EAAE,KAAK,IAAI,SAAS;SACxC,CAAC;IACJ,CAAC;SAAM,IAAI,QAAQ,EAAE,CAAC;QACpB,OAAO;YACL,IAAI,EAAE,QAAQ,CAAC,OAAO;YACtB,SAAS;YACT,UAAU;YACV,MAAM;SACP,CAAC;IACJ,CAAC;SAAM,IAAI,aAAa,EAAE,CAAC;QACzB,OAAO;YACL,IAAI,EAAE,QAAQ,CAAC,OAAO;YACtB,MAAM;YACN,IAAI,EAAE,aAAa,CAAC,KAAK;SAC1B,CAAC;IACJ,CAAC;SAAM,IACL,MAAM,CAAC,MAAM;QACb,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,kBAAkB;QACrC,MAAM,CAAC,CAAC,CAAC,CAAC,SAAS,EACnB,CAAC;QACD,OAAO;YACL,IAAI,EAAE,QAAQ,CAAC,OAAO;YACtB,MAAM;YACN,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,SAAS;SAC1B,CAAC;IACJ,CAAC;IACD,OAAO;AACT,CAAC;AAED,SAAS,qBAAqB,CAAC,IAAY;IACzC,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;AACpC,CAAC;AAED,SAAS,wBAAwB,CAC/B,GAAY;IAEZ,MAAM,IAAI,GAAG,GAAG,CAAC,UAAU,EAAE,CAAC;IAC9B,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,CAAC;IAC7C,GAAG,CAAC,QAAQ,EAAE,CAAC;IACf,IAAI,EAAE,IAAI,IAAI,EAAE,CAAC;QACf,OAAO;YACL,IAAI,EAAE,WAAW,CAAC,GAAG,EAAE,IAAI,EAAE,KAAK,CAAC;YACnC,EAAE,EAAE,WAAW,CAAC,GAAG,EAAE,EAAE,EAAE,KAAK,CAAC;SAChC,CAAC;IACJ,CAAC;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAED,SAAS,WAAW,CAAC,OAAgB;IACnC,MAAM,MAAM,GAAe,EAAE,CAAC;IAE9B,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;QACxB,MAAM,KAAK,GAAG,UAAU,CAAC,OAAO,CAAC,CAAC;QAClC,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,MAAM;QACR,CAAC;QACD,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACrB,CAAC;IACD,OAAO,MAAM,CAAC;AAChB,CAAC;AAED,SAAS,UAAU,CAAC,OAAgB;IAClC,MAAM,WAAW,GAAG,gBAAgB,CAAC,OAAO,CAAC,CAAC;IAC9C,IAAI,CAAC,WAAW,EAAE,CAAC;QACjB,OAAO;IACT,CAAC;IACD,IAAI,WAAW,CAAC,IAAI,KAAK,QAAQ,EAAE,CAAC;QAClC,MAAM,OAAO,GAAG,YAAY,CAC1B,OAAO,EACP,WAAW,CAAC,aAAa,EACzB,WAAW,CAAC,WAAW,CACxB,CAAC;QACF,OAAO;YACL,GAAG,WAAW;YACd,IAAI,EAAE,OAAO;YACb,OAAO;SACR,CAAC;IACJ,CAAC;SAAM,IACL,WAAW,CAAC,IAAI,KAAK,UAAU;QAC/B,WAAW,CAAC,cAAc;QAC1B,WAAW,CAAC,cAAc,EAC1B,CAAC;QACD,MAAM,OAAO,GAAG,YAAY,CAC1B,OAAO,EACP,WAAW,CAAC,cAAc,CAAC,KAAK,GAAG,WAAW,CAAC,cAAc,CAAC,KAAK;YACjE,CAAC,CAAC,WAAW,CAAC,cAAc;YAC5B,CAAC,CAAC,WAAW,CAAC,cAAc,EAC9B,WAAW,CAAC,WAAW,CACxB,CAAC;QACF,OAAO;YACL,GAAG,WAAW;YACd,IAAI,EAAE,eAAe;YACrB,OAAO;SACR,CAAC;IACJ,CAAC;SAAM,IACL,WAAW,CAAC,IAAI,KAAK,aAAa;QAClC,WAAW,CAAC,KAAK;QACjB,WAAW,CAAC,KAAK,EACjB,CAAC;QACD,OAAO;YACL,IAAI,EAAE,kBAAkB;YACxB,UAAU,EAAE,WAAW,CAAC,KAAK;YAC7B,SAAS,EAAE,WAAW,CAAC,KAAK;SAC7B,CAAC;IACJ,CAAC;AACH,CAAC;AAED,SAAS,mBAAmB,CAAC,GAAY;IACvC,IAAI,qBAAqB,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC,EAAE,CAAC;QAC5C,OAAO,IAAI,CAAC;IACd,CAAC;IACD,MAAM,IAAI,GAAG,GAAG,CAAC,UAAU,EAAE,CAAC;IAC9B,MAAM,IAAI,GAAG,oBAAoB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;IAElE,IAAI,IAAI,EAAE,CAAC;QACT,GAAG,CAAC,QAAQ,EAAE,CAAC;IACjB,CAAC;IAED,IAAI,IAAI,KAAK,cAAc,CAAC,UAAU,IAAI,IAAI,KAAK,cAAc,CAAC,QAAQ,EAAE,CAAC;QAC3E,OAAO;YACL,IAAI;YACJ,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC;SAC3B,CAAC;IACb,CAAC;SAAM,IAAI,IAAI,EAAE,CAAC;QAChB,OAAO;YACL,IAAI;SACI,CAAC;IACb,CAAC;IAED,OAAO,IAAI,CAAC;AACd,CAAC;AAED,SAAS,gBAAgB,CAAC,GAAY;IACpC,MAAM,IAAI,GAAG,GAAG,CAAC,UAAU,EAAE,CAAC;IAC9B,MAAM,eAAe,GACnB,mDAAmD,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACjE,IAAI,CAAC,eAAe,EAAE,CAAC;QACrB,MAAM,iBAAiB,GACrB,sEAAsE,CAAC,IAAI,CACzE,IAAI,CACL,CAAC;QAEJ,IAAI,CAAC,iBAAiB,EAAE,CAAC;YACvB,MAAM,eAAe,GAAG,0CAA0C,CAAC,IAAI,CACrE,IAAI,CACL,CAAC;YACF,IAAI,eAAe,EAAE,CAAC;gBACpB,MAAM,CAAC,GAAG,EAAE,KAAK,EAAE,KAAK,CAAC,GAAG,eAAe,CAAC;gBAC5C,GAAG,CAAC,QAAQ,EAAE,CAAC;gBACf,OAAO;oBACL,IAAI,EAAE,aAAa;oBACnB,KAAK,EAAE,WAAW,CAAC,GAAG,EAAE,KAAK,EAAE,KAAK,CAAC;oBACrC,KAAK,EAAE,WAAW,CAAC,GAAG,EAAE,KAAK,EAAE,KAAK,CAAC;iBAC7B,CAAC;YACb,CAAC;YAED,OAAO,IAAI,CAAC;QACd,CAAC;QAED,MAAM,CACJ,GAAG,EACH,SAAS,EACT,SAAS,EACT,SAAS,EACT,SAAS,EACT,QAAQ,EACR,QAAQ,EACR,OAAO,EACR,GAAG,iBAAiB,CAAC;QACtB,GAAG,CAAC,QAAQ,EAAE,CAAC;QACf,OAAO;YACL,OAAO;YACP,IAAI,EAAE,UAAU;YAChB,cAAc,EAAE,QAAQ,CAAC,SAAS,EAAE,SAAS,CAAC;YAC9C,cAAc,EAAE,QAAQ,CAAC,SAAS,EAAE,SAAS,CAAC;YAC9C,WAAW,EAAE,QAAQ,CAAC,QAAQ,EAAE,QAAQ,CAAC;SACjC,CAAC;IACb,CAAC;IACD,MAAM,CAAC,GAAG,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,CAAC,GAC1D,eAAe,CAAC;IAClB,GAAG,CAAC,QAAQ,EAAE,CAAC;IACf,OAAO;QACL,OAAO;QACP,IAAI,EAAE,QAAQ;QACd,WAAW,EAAE,QAAQ,CAAC,QAAQ,EAAE,QAAQ,CAAC;QACzC,aAAa,EAAE,QAAQ,CAAC,QAAQ,EAAE,QAAQ,CAAC;KAC5C,CAAC;AACJ,CAAC;AAED,SAAS,QAAQ,CAAC,KAAa,EAAE,KAAc;IAC7C,MAAM,QAAQ,GAAG,QAAQ,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;IACrC,OAAO;QACL,KAAK,EAAE,QAAQ;QACf,KAAK,EAAE,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,EAAE,EAAE,CAAC;KACrD,CAAC;AACJ,CAAC;AAED,SAAS,kBAAkB,CAAC,OAAgB;IAI1C,MAAM,aAAa,GAAG,WAAW,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;IACnD,MAAM,OAAO,GAAG,aAAa;QAC3B,CAAC,CAAC,WAAW,CAAC,OAAO,EAAE,aAAa,EAAE,KAAK,CAAC;QAC5C,CAAC,CAAC,aAAa,CAAC;IAElB,MAAM,WAAW,GAAG,WAAW,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;IACjD,MAAM,KAAK,GAAG,WAAW;QACvB,CAAC,CAAC,WAAW,CAAC,OAAO,EAAE,WAAW,EAAE,KAAK,CAAC;QAC1C,CAAC,CAAC,WAAW,CAAC;IAChB,OAAO,KAAK,IAAI,OAAO,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;AACtD,CAAC;AAED,SAAS,WAAW,CAAC,OAAgB,EAAE,MAAc;IACnD,MAAM,IAAI,GAAG,OAAO,CAAC,UAAU,EAAE,CAAC;IAClC,IAAI,IAAI,EAAE,UAAU,CAAC,MAAM,CAAC,EAAE,CAAC;QAC7B,OAAO,CAAC,QAAQ,EAAE,CAAC;QACnB,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;IAClC,CAAC;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAID,MAAM,aAAa,GAA6B;IAC9C,GAAG,EAAE,QAAQ,CAAC,KAAK;IACnB,GAAG,EAAE,QAAQ,CAAC,OAAO;IACrB,GAAG,EAAE,QAAQ,CAAC,SAAS;IACvB,IAAI,EAAE,QAAQ,CAAC,OAAO;CACvB,CAAC;AAEF,SAAS,YAAY,CACnB,GAAY,EACZ,WAAuB,EACvB,UAAsB;IAEtB,MAAM,OAAO,GAAoB,EAAE,CAAC;IACpC,IAAI,UAAU,GAAG,WAAW,CAAC,KAAK,CAAC;IACnC,IAAI,SAAS,GAAG,UAAU,CAAC,KAAK,CAAC;IAEjC,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,EAAE,CAAC;QACpB,MAAM,IAAI,GAAG,GAAG,CAAC,UAAU,EAAG,CAAC;QAC/B,MAAM,IAAI,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC;QAC/B,IAAI,CAAC,IAAI,EAAE,CAAC;YACV,MAAM;QACR,CAAC;QACD,GAAG,CAAC,QAAQ,EAAE,CAAC;QAEf,IAAI,MAAqB,CAAC;QAC1B,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAC9B,QAAQ,IAAI,EAAE,CAAC;YACb,KAAK,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;gBACpB,MAAM,GAAG;oBACP,IAAI;oBACJ,SAAS,EAAE,SAAS,EAAE;oBACtB,OAAO;iBACR,CAAC;gBACF,MAAM;YACR,CAAC;YACD,KAAK,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;gBACtB,MAAM,GAAG;oBACP,IAAI;oBACJ,UAAU,EAAE,UAAU,EAAE;oBACxB,OAAO;iBACR,CAAC;gBACF,MAAM;YACR,CAAC;YACD,KAAK,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC;gBACxB,MAAM,GAAG;oBACP,IAAI;oBACJ,UAAU,EAAE,UAAU,EAAE;oBACxB,SAAS,EAAE,SAAS,EAAE;oBACtB,OAAO;iBACR,CAAC;gBACF,MAAM;YACR,CAAC;YACD,KAAK,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;gBACtB,MAAM,GAAG;oBACP,IAAI;oBACJ,OAAO,EAAE,OAAO,CAAC,IAAI,EAAE;iBACxB,CAAC;gBACF,MAAM;YACR,CAAC;QACH,CAAC;QACD,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACvB,CAAC;IACD,OAAO,OAAO,CAAC;AACjB,CAAC;AAED,SAAS,WAAW,CAAC,IAAY;IAC/B,OAAO,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC;AACxC,CAAC;AAED,SAAS,WAAW,CAAC,GAAY,EAAE,KAAa,EAAE,IAAmB;IACnE,IAAI,GAAG,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;QACzB,OAAO,KAAK,CAAC;IACf,CAAC;IACD,IAAI,IAAI,KAAK,KAAK;QAAE,OAAO,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;IACrD,IAAI,IAAI,KAAK,KAAK;QAAE,OAAO,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;IACrD,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;AACjD,CAAC","sourcesContent":["import Context from './context.js';\nimport type {\n  GitDiff,\n  AnyFileChange,\n  AnyLineChange,\n  ChunkRange,\n  AnyChunk,\n  GitDiffOptions,\n} from './types.js';\nimport {\n  ExtendedHeader,\n  ExtendedHeaderValues,\n  FileType,\n  LineType,\n} from './constants.js';\n\nexport default function parseGitDiff(\n  diff: string,\n  options?: GitDiffOptions\n): GitDiff {\n  const ctx = new Context(diff, options);\n  const files = parseFileChanges(ctx);\n\n  return {\n    type: 'GitDiff',\n    files,\n  };\n}\n\nfunction parseFileChanges(ctx: Context): AnyFileChange[] {\n  const changedFiles: AnyFileChange[] = [];\n  while (!ctx.isEof()) {\n    const changed = parseFileChange(ctx);\n    if (!changed) {\n      break;\n    }\n    changedFiles.push(changed);\n  }\n  return changedFiles;\n}\n\nfunction parseFileChange(ctx: Context): AnyFileChange | undefined {\n  if (!isComparisonInputLine(ctx.getCurLine())) {\n    return;\n  }\n  const comparisonLineParsed = parseComparisonInputLine(ctx);\n  let isDeleted = false;\n  let isNew = false;\n  let isRename = false;\n  let pathBefore = '';\n  let pathAfter = '';\n  while (!ctx.isEof()) {\n    const extHeader = parseExtendedHeader(ctx);\n    if (!extHeader) {\n      break;\n    }\n    if (extHeader.type === ExtendedHeader.Deleted) {\n      isDeleted = true;\n      pathBefore = comparisonLineParsed?.from || '';\n    }\n    if (extHeader.type === ExtendedHeader.NewFile) {\n      isNew = true;\n      pathAfter = comparisonLineParsed?.to || '';\n    }\n    if (extHeader.type === ExtendedHeader.RenameFrom) {\n      isRename = true;\n      pathBefore = extHeader.path as string;\n    }\n    if (extHeader.type === ExtendedHeader.RenameTo) {\n      isRename = true;\n      pathAfter = extHeader.path as string;\n    }\n  }\n\n  const changeMarkers = parseChangeMarkers(ctx);\n  const chunks = parseChunks(ctx);\n\n  if (isDeleted && chunks.length && chunks[0].type === 'BinaryFilesChunk') {\n    return {\n      type: FileType.Deleted,\n      chunks,\n      path: chunks[0].pathBefore,\n    };\n  }\n  if (isDeleted) {\n    return {\n      type: FileType.Deleted,\n      chunks,\n      path: changeMarkers?.deleted || pathBefore,\n    };\n  } else if (isNew && chunks.length && chunks[0].type === 'BinaryFilesChunk') {\n    return {\n      type: FileType.Added,\n      chunks,\n      path: chunks[0].pathAfter,\n    };\n  } else if (isNew) {\n    return {\n      type: FileType.Added,\n      chunks,\n      path: changeMarkers?.added || pathAfter,\n    };\n  } else if (isRename) {\n    return {\n      type: FileType.Renamed,\n      pathAfter,\n      pathBefore,\n      chunks,\n    };\n  } else if (changeMarkers) {\n    return {\n      type: FileType.Changed,\n      chunks,\n      path: changeMarkers.added,\n    };\n  } else if (\n    chunks.length &&\n    chunks[0].type === 'BinaryFilesChunk' &&\n    chunks[0].pathAfter\n  ) {\n    return {\n      type: FileType.Changed,\n      chunks,\n      path: chunks[0].pathAfter,\n    };\n  }\n  return;\n}\n\nfunction isComparisonInputLine(line: string): boolean {\n  return line.indexOf('diff') === 0;\n}\n\nfunction parseComparisonInputLine(\n  ctx: Context\n): { from: string; to: string } | null {\n  const line = ctx.getCurLine();\n  const [to, from] = line.split(' ').reverse();\n  ctx.nextLine();\n  if (to && from) {\n    return {\n      from: getFilePath(ctx, from, 'src'),\n      to: getFilePath(ctx, to, 'dst'),\n    };\n  }\n  return null;\n}\n\nfunction parseChunks(context: Context): AnyChunk[] {\n  const chunks: AnyChunk[] = [];\n\n  while (!context.isEof()) {\n    const chunk = parseChunk(context);\n    if (!chunk) {\n      break;\n    }\n    chunks.push(chunk);\n  }\n  return chunks;\n}\n\nfunction parseChunk(context: Context): AnyChunk | undefined {\n  const chunkHeader = parseChunkHeader(context);\n  if (!chunkHeader) {\n    return;\n  }\n  if (chunkHeader.type === 'Normal') {\n    const changes = parseChanges(\n      context,\n      chunkHeader.fromFileRange,\n      chunkHeader.toFileRange\n    );\n    return {\n      ...chunkHeader,\n      type: 'Chunk',\n      changes,\n    };\n  } else if (\n    chunkHeader.type === 'Combined' &&\n    chunkHeader.fromFileRangeA &&\n    chunkHeader.fromFileRangeB\n  ) {\n    const changes = parseChanges(\n      context,\n      chunkHeader.fromFileRangeA.start < chunkHeader.fromFileRangeB.start\n        ? chunkHeader.fromFileRangeA\n        : chunkHeader.fromFileRangeB,\n      chunkHeader.toFileRange\n    );\n    return {\n      ...chunkHeader,\n      type: 'CombinedChunk',\n      changes,\n    };\n  } else if (\n    chunkHeader.type === 'BinaryFiles' &&\n    chunkHeader.fileA &&\n    chunkHeader.fileB\n  ) {\n    return {\n      type: 'BinaryFilesChunk',\n      pathBefore: chunkHeader.fileA,\n      pathAfter: chunkHeader.fileB,\n    };\n  }\n}\n\nfunction parseExtendedHeader(ctx: Context) {\n  if (isComparisonInputLine(ctx.getCurLine())) {\n    return null;\n  }\n  const line = ctx.getCurLine();\n  const type = ExtendedHeaderValues.find((v) => line.startsWith(v));\n\n  if (type) {\n    ctx.nextLine();\n  }\n\n  if (type === ExtendedHeader.RenameFrom || type === ExtendedHeader.RenameTo) {\n    return {\n      type,\n      path: line.slice(`${type} `.length),\n    } as const;\n  } else if (type) {\n    return {\n      type,\n    } as const;\n  }\n\n  return null;\n}\n\nfunction parseChunkHeader(ctx: Context) {\n  const line = ctx.getCurLine();\n  const normalChunkExec =\n    /^@@\\s\\-(\\d+),?(\\d+)?\\s\\+(\\d+),?(\\d+)?\\s@@\\s?(.+)?/.exec(line);\n  if (!normalChunkExec) {\n    const combinedChunkExec =\n      /^@@@\\s\\-(\\d+),?(\\d+)?\\s\\-(\\d+),?(\\d+)?\\s\\+(\\d+),?(\\d+)?\\s@@@\\s?(.+)?/.exec(\n        line\n      );\n\n    if (!combinedChunkExec) {\n      const binaryChunkExec = /^Binary\\sfiles\\s(.*)\\sand\\s(.*)\\sdiffer$/.exec(\n        line\n      );\n      if (binaryChunkExec) {\n        const [all, fileA, fileB] = binaryChunkExec;\n        ctx.nextLine();\n        return {\n          type: 'BinaryFiles',\n          fileA: getFilePath(ctx, fileA, 'src'),\n          fileB: getFilePath(ctx, fileB, 'dst'),\n        } as const;\n      }\n\n      return null;\n    }\n\n    const [\n      all,\n      delStartA,\n      delLinesA,\n      delStartB,\n      delLinesB,\n      addStart,\n      addLines,\n      context,\n    ] = combinedChunkExec;\n    ctx.nextLine();\n    return {\n      context,\n      type: 'Combined',\n      fromFileRangeA: getRange(delStartA, delLinesA),\n      fromFileRangeB: getRange(delStartB, delLinesB),\n      toFileRange: getRange(addStart, addLines),\n    } as const;\n  }\n  const [all, delStart, delLines, addStart, addLines, context] =\n    normalChunkExec;\n  ctx.nextLine();\n  return {\n    context,\n    type: 'Normal',\n    toFileRange: getRange(addStart, addLines),\n    fromFileRange: getRange(delStart, delLines),\n  };\n}\n\nfunction getRange(start: string, lines?: string) {\n  const startNum = parseInt(start, 10);\n  return {\n    start: startNum,\n    lines: lines === undefined ? 1 : parseInt(lines, 10),\n  };\n}\n\nfunction parseChangeMarkers(context: Context): {\n  deleted: string;\n  added: string;\n} | null {\n  const deleterMarker = parseMarker(context, '--- ');\n  const deleted = deleterMarker\n    ? getFilePath(context, deleterMarker, 'src')\n    : deleterMarker;\n\n  const addedMarker = parseMarker(context, '+++ ');\n  const added = addedMarker\n    ? getFilePath(context, addedMarker, 'dst')\n    : addedMarker;\n  return added && deleted ? { added, deleted } : null;\n}\n\nfunction parseMarker(context: Context, marker: string): string | null {\n  const line = context.getCurLine();\n  if (line?.startsWith(marker)) {\n    context.nextLine();\n    return line.replace(marker, '');\n  }\n  return null;\n}\n\ntype LineType = AnyLineChange['type'];\n\nconst CHAR_TYPE_MAP: Record<string, LineType> = {\n  '+': LineType.Added,\n  '-': LineType.Deleted,\n  ' ': LineType.Unchanged,\n  '\\\\': LineType.Message,\n};\n\nfunction parseChanges(\n  ctx: Context,\n  rangeBefore: ChunkRange,\n  rangeAfter: ChunkRange\n): AnyLineChange[] {\n  const changes: AnyLineChange[] = [];\n  let lineBefore = rangeBefore.start;\n  let lineAfter = rangeAfter.start;\n\n  while (!ctx.isEof()) {\n    const line = ctx.getCurLine()!;\n    const type = getLineType(line);\n    if (!type) {\n      break;\n    }\n    ctx.nextLine();\n\n    let change: AnyLineChange;\n    const content = line.slice(1);\n    switch (type) {\n      case LineType.Added: {\n        change = {\n          type,\n          lineAfter: lineAfter++,\n          content,\n        };\n        break;\n      }\n      case LineType.Deleted: {\n        change = {\n          type,\n          lineBefore: lineBefore++,\n          content,\n        };\n        break;\n      }\n      case LineType.Unchanged: {\n        change = {\n          type,\n          lineBefore: lineBefore++,\n          lineAfter: lineAfter++,\n          content,\n        };\n        break;\n      }\n      case LineType.Message: {\n        change = {\n          type,\n          content: content.trim(),\n        };\n        break;\n      }\n    }\n    changes.push(change);\n  }\n  return changes;\n}\n\nfunction getLineType(line: string): LineType | null {\n  return CHAR_TYPE_MAP[line[0]] || null;\n}\n\nfunction getFilePath(ctx: Context, input: string, type: 'src' | 'dst') {\n  if (ctx.options.noPrefix) {\n    return input;\n  }\n  if (type === 'src') return input.replace(/^a\\//, '');\n  if (type === 'dst') return input.replace(/^b\\//, '');\n  throw new Error('Unexpected unreachable code');\n}\n"]}