{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/types.ts"],"names":[],"mappings":"","sourcesContent":["import { LineType, FileType } from './constants.js';\n\nexport interface Base<Type extends string> {\n  readonly type: Type;\n}\n\ninterface BaseChange<Type extends string> extends Base<Type> {\n  content: string;\n}\n\nexport interface AddedLine extends BaseChange<typeof LineType.Added> {\n  lineAfter: number;\n}\n\nexport interface DeletedLine extends BaseChange<typeof LineType.Deleted> {\n  lineBefore: number;\n}\n\nexport interface UnchangedLine extends BaseChange<typeof LineType.Unchanged> {\n  lineBefore: number;\n  lineAfter: number;\n}\n\nexport interface MessageLine extends BaseChange<typeof LineType.Message> {\n  content: string;\n}\n\nexport type AnyLineChange =\n  | AddedLine\n  | DeletedLine\n  | UnchangedLine\n  | MessageLine;\n\nexport interface ChunkRange {\n  start: number;\n  lines: number;\n}\n\nexport interface Chunk extends Base<'Chunk'> {\n  fromFileRange: ChunkRange;\n  toFileRange: ChunkRange;\n  changes: AnyLineChange[];\n  context: string | undefined;\n}\n\nexport interface CombinedChunk extends Base<'CombinedChunk'> {\n  fromFileRangeA: ChunkRange;\n  fromFileRangeB: ChunkRange;\n  toFileRange: ChunkRange;\n  changes: AnyLineChange[];\n  context: string | undefined;\n}\n\nexport interface BinaryFilesChunk extends Base<'BinaryFilesChunk'> {\n  pathBefore: string;\n  pathAfter: string;\n}\n\nexport type AnyChunk = Chunk | CombinedChunk | BinaryFilesChunk;\n\nexport interface ChangedFile extends Base<typeof FileType.Changed> {\n  path: string;\n  chunks: AnyChunk[];\n}\n\nexport interface AddedFile extends Base<typeof FileType.Added> {\n  path: string;\n  chunks: AnyChunk[];\n}\n\nexport interface DeletedFile extends Base<typeof FileType.Deleted> {\n  path: string;\n  chunks: AnyChunk[];\n}\n\nexport interface RenamedFile extends Base<typeof FileType.Renamed> {\n  pathBefore: string;\n  pathAfter: string;\n  chunks: AnyChunk[];\n}\n\nexport type AnyFileChange = ChangedFile | AddedFile | DeletedFile | RenamedFile;\n\nexport interface GitDiff extends Base<'GitDiff'> {\n  files: AnyFileChange[];\n}\n\nexport interface FilledGitDiffOptions {\n  noPrefix: boolean;\n}\n\nexport type GitDiffOptions = Partial<FilledGitDiffOptions>;\n"]}